// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	GetNumberRebelds(ctx context.Context, in *LeiaRequest, opts ...grpc.CallOption) (*LeiaReply, error)
	GetServer(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerReply, error)
	AddCity(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerReply, error)
	UpdateName(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerReply, error)
	UpdateNumber(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerReply, error)
	DeleteCity(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerReply, error)
	PropagationRequest(ctx context.Context, in *Propagation, opts ...grpc.CallOption) (*PropagationReply, error)
	EventualConsistency(ctx context.Context, in *PropagationReply, opts ...grpc.CallOption) (*Propagation, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) GetNumberRebelds(ctx context.Context, in *LeiaRequest, opts ...grpc.CallOption) (*LeiaReply, error) {
	out := new(LeiaReply)
	err := c.cc.Invoke(ctx, "/grpc.ChatService/GetNumberRebelds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetServer(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerReply, error) {
	out := new(BrokerReply)
	err := c.cc.Invoke(ctx, "/grpc.ChatService/GetServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AddCity(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerReply, error) {
	out := new(ServerReply)
	err := c.cc.Invoke(ctx, "/grpc.ChatService/AddCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateName(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerReply, error) {
	out := new(ServerReply)
	err := c.cc.Invoke(ctx, "/grpc.ChatService/UpdateName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateNumber(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerReply, error) {
	out := new(ServerReply)
	err := c.cc.Invoke(ctx, "/grpc.ChatService/UpdateNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteCity(ctx context.Context, in *ServerRequest, opts ...grpc.CallOption) (*ServerReply, error) {
	out := new(ServerReply)
	err := c.cc.Invoke(ctx, "/grpc.ChatService/DeleteCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) PropagationRequest(ctx context.Context, in *Propagation, opts ...grpc.CallOption) (*PropagationReply, error) {
	out := new(PropagationReply)
	err := c.cc.Invoke(ctx, "/grpc.ChatService/PropagationRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) EventualConsistency(ctx context.Context, in *PropagationReply, opts ...grpc.CallOption) (*Propagation, error) {
	out := new(Propagation)
	err := c.cc.Invoke(ctx, "/grpc.ChatService/EventualConsistency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	GetNumberRebelds(context.Context, *LeiaRequest) (*LeiaReply, error)
	GetServer(context.Context, *BrokerRequest) (*BrokerReply, error)
	AddCity(context.Context, *ServerRequest) (*ServerReply, error)
	UpdateName(context.Context, *ServerRequest) (*ServerReply, error)
	UpdateNumber(context.Context, *ServerRequest) (*ServerReply, error)
	DeleteCity(context.Context, *ServerRequest) (*ServerReply, error)
	PropagationRequest(context.Context, *Propagation) (*PropagationReply, error)
	EventualConsistency(context.Context, *PropagationReply) (*Propagation, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) GetNumberRebelds(context.Context, *LeiaRequest) (*LeiaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumberRebelds not implemented")
}
func (UnimplementedChatServiceServer) GetServer(context.Context, *BrokerRequest) (*BrokerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (UnimplementedChatServiceServer) AddCity(context.Context, *ServerRequest) (*ServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCity not implemented")
}
func (UnimplementedChatServiceServer) UpdateName(context.Context, *ServerRequest) (*ServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateName not implemented")
}
func (UnimplementedChatServiceServer) UpdateNumber(context.Context, *ServerRequest) (*ServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNumber not implemented")
}
func (UnimplementedChatServiceServer) DeleteCity(context.Context, *ServerRequest) (*ServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCity not implemented")
}
func (UnimplementedChatServiceServer) PropagationRequest(context.Context, *Propagation) (*PropagationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropagationRequest not implemented")
}
func (UnimplementedChatServiceServer) EventualConsistency(context.Context, *PropagationReply) (*Propagation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventualConsistency not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_GetNumberRebelds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeiaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetNumberRebelds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ChatService/GetNumberRebelds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetNumberRebelds(ctx, req.(*LeiaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ChatService/GetServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetServer(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AddCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AddCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ChatService/AddCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AddCity(ctx, req.(*ServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ChatService/UpdateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateName(ctx, req.(*ServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ChatService/UpdateNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateNumber(ctx, req.(*ServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ChatService/DeleteCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteCity(ctx, req.(*ServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_PropagationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Propagation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).PropagationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ChatService/PropagationRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).PropagationRequest(ctx, req.(*Propagation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_EventualConsistency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropagationReply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).EventualConsistency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ChatService/EventualConsistency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).EventualConsistency(ctx, req.(*PropagationReply))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumberRebelds",
			Handler:    _ChatService_GetNumberRebelds_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _ChatService_GetServer_Handler,
		},
		{
			MethodName: "AddCity",
			Handler:    _ChatService_AddCity_Handler,
		},
		{
			MethodName: "UpdateName",
			Handler:    _ChatService_UpdateName_Handler,
		},
		{
			MethodName: "UpdateNumber",
			Handler:    _ChatService_UpdateNumber_Handler,
		},
		{
			MethodName: "DeleteCity",
			Handler:    _ChatService_DeleteCity_Handler,
		},
		{
			MethodName: "PropagationRequest",
			Handler:    _ChatService_PropagationRequest_Handler,
		},
		{
			MethodName: "EventualConsistency",
			Handler:    _ChatService_EventualConsistency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chat.proto",
}
