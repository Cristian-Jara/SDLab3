syntax = "proto3";

package grpc;

option go_package = "github.com/Cristian-Jara/SDLab3.git/proto";

message LeiaRequest{
    string planet = 1;
    string city = 2; 
    int32 X = 3;
    int32 Y = 4;
    int32 Z = 5;
}

message LeiaReply{
    string status = 1;
    int32 quantity = 2;
    int32 X = 3;
    int32 Y = 4;
    int32 Z = 5;
    string server = 6;
}

message ServerRequest {
    string planet = 1;
    string city = 2;
    string value = 3; 
    int32 X = 4;
    int32 Y = 5;
    int32 Z = 6;
}

message ServerReply {
    string status = 1; 
    int32 X = 2;
    int32 Y = 3;
    int32 Z = 4;
}

message BrokerRequest{
    int32 X = 1;
    int32 Y = 2;
    int32 Z = 3;
}

message BrokerReply{
    string IP = 1;
}

message Data{
    string city = 1;
    string value = 2;
}

message PlanetsData{
    string planet = 1;
    int32 X = 2;
    int32 Y = 3;
    int32 Z = 4;
    repeated Data data = 5;
    string logs = 6;
}

message Propagation{
    string status = 1;
}

message PropagationReply{
    string status = 1; 
    repeated PlanetsData planetsdata = 2;
}

service ChatService {
    rpc GetNumberRebelds(LeiaRequest) returns (LeiaReply); // Obtener rebeldes
    rpc GetServer(BrokerRequest) returns (BrokerReply); //Obtener IP
    rpc AddCity(ServerRequest) returns (ServerReply); //Agregar ciudad
    rpc UpdateName(ServerRequest) returns (ServerReply); //Update nombre de la ciudad
    rpc UpdateNumber(ServerRequest) returns (ServerReply); //Update cantidad de rebeldes
    rpc DeleteCity(ServerRequest) returns (ServerReply); //Eliminar ciudad del registro planetario
    rpc PropagationRequest(Propagation) returns (PropagationReply); // Solicita la info para realizar merge
    rpc EventualConsistency(PropagationReply) returns (Propagation); //Para propagar entre servers
}
